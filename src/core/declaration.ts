import { notNullish, slash } from "@antfu/utils"
import { promises as fs } from "fs"
import { dirname, isAbsolute, relative } from "path"

import { getTransformedPath, resolveExternalImports } from "./utils"

import type { Context } from "./context"

export async function generateDeclaration(
	ctx: Context,
	filepath: string,
	removeUnused = false
): Promise<void> {
	const items = [
		...Object.values({
			...ctx.componentNameMap,
			...ctx.componentCustomMap,
		}),
		...resolveExternalImports(ctx.options.external),
	]
	const imports: Record<string, string> = Object.fromEntries(
		items
			.map(({ from: path, as: name, name: importName }) => {
				if (!name) return undefined
				path = getTransformedPath(path, ctx)
				const related: string = isAbsolute(path)
					? `./${relative(dirname(filepath), path)}`
					: path

				let entry = `typeof import("${slash(related)}")`
				if (importName) entry += `["${importName}"]`
				else entry += `["default"]`
				return [name, entry]
			})
			.filter(notNullish)
	)

	if (!Object.keys(imports).length) return

	const lines = Object.entries({
		...imports,
	})
		.sort((a, b) => a[0].localeCompare(b[0]))
		.filter(([name]) =>
			removeUnused ? items.find((i) => i.as === name) : true
		)
		.map(([name, v]) => {
			if (!/^\w+$/.test(name)) name = `"${name}"`
			return `const ${name}: ${v}`
		})
	const code = `// generated by unplugin-svelte-components
// We suggest you to commit this file into source control
declare global {
    ${lines.join("\n    ")}
}

export {}
`
	fs.writeFile(filepath, code, "utf-8")
}
